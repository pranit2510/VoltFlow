"use client";

import { useState, useEffect } from 'react'
import { reportingService } from '@/lib/reporting-service'

export default function Reporting() {
  const [reports, setReports] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [dateRange, setDateRange] = useState({
    start: '',
    end: ''
  })

  useEffect(() => {
    loadReports()
  }, [])

  const loadReports = async () => {
    try {
      setLoading(true)
      const data = await reportingService.getReports()
      setReports(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load reports')
    } finally {
      setLoading(false)
    }
  }

  const handleDateRangeChange = async () => {
    if (!dateRange.start || !dateRange.end) return

    try {
      setLoading(true)
      const data = await reportingService.getReportsByDateRange(
        new Date(dateRange.start),
        new Date(dateRange.end)
      )
      setReports(data)
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Failed to load reports')
    } finally {
      setLoading(false)
    }
  }

  if (loading) return <div>Loading...</div>
  if (error) return <div className="text-red-500">Error: {error}</div>

  return (
    <div className="space-y-6">
      {/* Date Range Filter */}
      <div className="bg-white p-6 rounded-lg shadow">
        <h2 className="text-lg font-semibold mb-4">Filter Reports</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label className="block text-sm font-medium text-gray-700">Start Date</label>
            <input
              type="date"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              value={dateRange.start}
              onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700">End Date</label>
            <input
              type="date"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500"
              value={dateRange.end}
              onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
            />
          </div>
          <div className="md:col-span-2">
            <button
              onClick={handleDateRangeChange}
              disabled={!dateRange.start || !dateRange.end}
              className="w-full inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 disabled:opacity-50"
            >
              Apply Filter
            </button>
          </div>
        </div>
      </div>

      {/* Reports Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {/* Revenue Card */}
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-medium text-gray-900">Total Revenue</h3>
          <p className="mt-2 text-3xl font-semibold text-indigo-600">
            ${reports?.revenue.toFixed(2)}
          </p>
          <p className="mt-2 text-sm text-gray-500">
            {reports?.revenueChange > 0 ? '+' : ''}{reports?.revenueChange}% from last period
          </p>
        </div>

        {/* Leads Card */}
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-medium text-gray-900">New Leads</h3>
          <p className="mt-2 text-3xl font-semibold text-indigo-600">
            {reports?.newLeads}
          </p>
          <p className="mt-2 text-sm text-gray-500">
            {reports?.leadsChange > 0 ? '+' : ''}{reports?.leadsChange}% from last period
          </p>
        </div>

        {/* Conversions Card */}
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-medium text-gray-900">Conversions</h3>
          <p className="mt-2 text-3xl font-semibold text-indigo-600">
            {reports?.conversions}
          </p>
          <p className="mt-2 text-sm text-gray-500">
            {reports?.conversionRate}% conversion rate
          </p>
        </div>

        {/* Active Jobs Card */}
        <div className="bg-white rounded-lg shadow p-6">
          <h3 className="text-lg font-medium text-gray-900">Active Jobs</h3>
          <p className="mt-2 text-3xl font-semibold text-indigo-600">
            {reports?.activeJobs}
          </p>
          <p className="mt-2 text-sm text-gray-500">
            {reports?.completedJobs} completed this period
          </p>
        </div>
      </div>

      {/* Detailed Reports */}
      <div className="bg-white rounded-lg shadow overflow-hidden">
        <div className="px-6 py-4 border-b border-gray-200">
          <h2 className="text-lg font-semibold">Detailed Reports</h2>
        </div>
        <div className="divide-y divide-gray-200">
          {/* Revenue by Client */}
          <div className="p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Revenue by Client</h3>
            <div className="space-y-4">
              {reports?.revenueByClient.map((client: any) => (
                <div key={client.name} className="flex items-center justify-between">
                  <span className="text-sm font-medium text-gray-900">{client.name}</span>
                  <span className="text-sm text-gray-500">${client.revenue.toFixed(2)}</span>
                </div>
              ))}
            </div>
          </div>

          {/* Job Status Distribution */}
          <div className="p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Job Status Distribution</h3>
            <div className="space-y-4">
              {reports?.jobStatus.map((status: any) => (
                <div key={status.name} className="flex items-center justify-between">
                  <span className="text-sm font-medium text-gray-900">{status.name}</span>
                  <span className="text-sm text-gray-500">{status.count} jobs</span>
                </div>
              ))}
            </div>
          </div>

          {/* Lead Sources */}
          <div className="p-6">
            <h3 className="text-lg font-medium text-gray-900 mb-4">Lead Sources</h3>
            <div className="space-y-4">
              {reports?.leadSources.map((source: any) => (
                <div key={source.name} className="flex items-center justify-between">
                  <span className="text-sm font-medium text-gray-900">{source.name}</span>
                  <span className="text-sm text-gray-500">{source.count} leads</span>
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </div>
  )
} 